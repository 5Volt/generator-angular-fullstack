{
  "name": "generator-angular-fullstack",
  "version": "2.0.13",
  "description": "Yeoman generator for creating MEAN stack applications, using MongoDB, Express, AngularJS, and Node",
  "keywords": [
    "yeoman-generator",
    "mean",
    "mongodb",
    "angularjs",
    "express",
    "scaffold",
    "fullstack",
    "framework",
    "component",
    "front-end",
    "app"
  ],
  "homepage": "https://github.com/DaftMonk/generator-angular-fullstack",
  "bugs": {
    "url": "https://github.com/DaftMonk/generator-angular-fullstack/issues"
  },
  "author": {
    "name": "Tyler Henkel"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/DaftMonk/generator-angular-fullstack.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "yeoman-generator": "~0.17.0",
    "chalk": "~0.4.0",
    "wiredep": "~0.4.2",
    "generator-ng-component": "~0.0.4"
  },
  "peerDependencies": {
    "yo": ">=1.2.0"
  },
  "devDependencies": {
    "chai": "^1.9.1",
    "fs-extra": "^0.9.1",
    "grunt": "~0.4.1",
    "grunt-build-control": "git://github.com/DaftMonk/grunt-build-control",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-conventional-changelog": "~1.0.0",
    "grunt-mocha-test": "^0.11.0",
    "grunt-release": "~0.6.0",
    "load-grunt-tasks": "~0.2.0",
    "marked": "~0.2.8",
    "mocha": "~1.21.0",
    "q": "^1.0.1",
    "semver": "~2.2.1",
    "shelljs": "^0.3.0",
    "underscore.string": "^2.3.3"
  },
  "engines": {
    "node": ">=0.10.0",
    "npm": ">=1.2.10"
  },
  "licenses": [
    {
      "type": "BSD"
    }
  ],
  "readme": "# AngularJS Full-Stack generator [![Build Status](https://travis-ci.org/DaftMonk/generator-angular-fullstack.svg?branch=master)](http://travis-ci.org/DaftMonk/generator-angular-fullstack) [![Gitter chat](https://badges.gitter.im/gitterHQ/gitter.png)](https://gitter.im/DaftMonk/generator-angular-fullstack)\r\n\r\n> Yeoman generator for creating MEAN stack applications, using MongoDB, Express, AngularJS, and Node - lets you quickly set up a project following best practices.\r\n\r\n## Example project\r\n\r\nGenerated with defaults: http://fullstack-demo.herokuapp.com/.\r\n\r\nSource code: https://github.com/DaftMonk/fullstack-demo\r\n\r\n## Usage\r\n\r\nInstall `generator-angular-fullstack`:\r\n```\r\nnpm install -g generator-angular-fullstack\r\n```\r\n\r\nMake a new directory, and `cd` into it:\r\n```\r\nmkdir my-new-project && cd $_\r\n```\r\n\r\nRun `yo angular-fullstack`, optionally passing an app name:\r\n```\r\nyo angular-fullstack [app-name]\r\n```\r\n\r\nRun `grunt` for building, `grunt serve` for preview, and `grunt serve:dist` for a preview of the built app.\r\n\r\n## Prerequisites\r\n\r\n* MongoDB - Download and Install [MongoDB](http://www.mongodb.org/downloads) - If you plan on scaffolding your project with mongoose, you'll need mongoDB to be installed and have the `mongod` process running.\r\n\r\n## Supported Configurations\r\n\r\n**Client**\r\n\r\n* Scripts: `JavaScript`, `CoffeeScript`\r\n* Markup:  `HTML`, `Jade`\r\n* Stylesheets: `CSS`, `Stylus`, `Sass`, `Less`,\r\n* Angular Routers: `ngRoute`, `ui-router`\r\n\r\n**Server**\r\n\r\n* Database: `None`, `MongoDB`\r\n* Authentication boilerplate: `Yes`, `No`\r\n* oAuth integrations: `Facebook` `Twitter` `Google`\r\n* Socket.io integration: `Yes`, `No`\r\n\r\n## Injection\r\n\r\nA grunt task looks for new files in your `client/app` and `client/components` folder and automatically injects them in the appropriate places based on an injection block.\r\n\r\n* `less` files into `client/app.less`\r\n* `scss` files into `client/app.scss`\r\n* `stylus` files into `client/app.styl`\r\n* `css` files into `client/index.html`\r\n* `js` files into `client/index.html`\r\n* `coffeescript` temp `js` files into `client/index.html`\r\n\r\n## Generators\r\n\r\nAvailable generators:\r\n\r\n* App\r\n    - [angular-fullstack](#app) (aka [angular-fullstack:app](#app))\r\n* Server Side\r\n    - [angular-fullstack:endpoint](#endpoint)\r\n* Client Side\r\n    - [angular-fullstack:route](#route)\r\n    - [angular-fullstack:controller](#controller)\r\n    - [angular-fullstack:filter](#filter)\r\n    - [angular-fullstack:directive](#directive)\r\n    - [angular-fullstack:service](#service)\r\n    - [angular-fullstack:provider](#service)\r\n    - [angular-fullstack:factory](#service)\r\n    - [angular-fullstack:decorator](#decorator)\r\n* Deployment\r\n    - [angular-fullstack:openshift](#openshift)\r\n    - [angular-fullstack:heroku](#heroku)\r\n\r\n### App\r\nSets up a new AngularJS + Express app, generating all the boilerplate you need to get started.\r\n\r\nExample:\r\n```bash\r\nyo angular-fullstack\r\n```\r\n\r\n### Endpoint\r\nGenerates a new API endpoint.\r\n\r\n\r\nExample:\r\n```bash\r\nyo angular-fullstack:endpoint message\r\n[?] What will the url of your endpoint be? /api/messages\r\n```\r\n\r\nProduces:\r\n\r\n    server/api/message/index.js\r\n    server/api/message/message.spec.js\r\n    server/api/message/message.controller.js\r\n    server/api/message/message.model.js  (optional)\r\n    server/api/message/message.socket.js (optional)\r\n\r\n### Route\r\nGenerates a new route.\r\n\r\nExample:\r\n```bash\r\nyo angular-fullstack:route myroute\r\n[?] Where would you like to create this route? client/app/\r\n[?] What will the url of your route be? /myroute\r\n```\r\n\r\nProduces:\r\n\r\n    client/app/myroute/myroute.js\r\n    client/app/myroute/myroute.controller.js\r\n    client/app/myroute/myroute.controller.spec.js\r\n    client/app/myroute/myroute.html\r\n    client/app/myroute/myroute.scss\r\n\r\n\r\n### Controller\r\nGenerates a controller.\r\n\r\nExample:\r\n```bash\r\nyo angular-fullstack:controller user\r\n[?] Where would you like to create this controller? client/app/\r\n```\r\n\r\nProduces:\r\n\r\n    client/app/user/user.controller.js\r\n    client/app/user/user.controller.spec.js\r\n\r\n### Directive\r\nGenerates a directive.\r\n\r\nExample:\r\n```bash\r\nyo angular-fullstack:directive myDirective\r\n[?] Where would you like to create this directive? client/app/\r\n[?] Does this directive need an external html file? Yes\r\n```\r\n\r\nProduces:\r\n\r\n    client/app/myDirective/myDirective.directive.js\r\n    client/app/myDirective/myDirective.directive.spec.js\r\n    client/app/myDirective/myDirective.html\r\n    client/app/myDirective/myDirective.scss\r\n\r\n**Simple directive without an html file**\r\n\r\nExample:\r\n```bash\r\nyo angular-fullstack:directive simple\r\n[?] Where would you like to create this directive? client/app/\r\n[?] Does this directive need an external html file? No\r\n```\r\n\r\nProduces:\r\n\r\n    client/app/simple/simple.directive.js\r\n    client/app/simple/simple.directive.spec.js\r\n\r\n### Filter\r\nGenerates a filter.\r\n\r\nExample:\r\n```bash\r\nyo angular-fullstack:filter myFilter\r\n[?] Where would you like to create this filter? client/app/\r\n```\r\n\r\nProduces:\r\n\r\n    client/app/myFilter/myFilter.filter.js\r\n    client/app/myFilter/myFilter.filter.spec.js\r\n\r\n### Service\r\nGenerates an AngularJS service.\r\n\r\nExample:\r\n```bash\r\nyo angular-fullstack:service myService\r\n[?] Where would you like to create this service? client/app/\r\n```\r\n\r\nProduces:\r\n\r\n    client/app/myService/myService.service.js\r\n    client/app/myService/myService.service.spec.js\r\n\r\n\r\nYou can also do `yo angular-fullstack:factory` and `yo angular-fullstack:provider` for other types of services.\r\n\r\n### Decorator\r\nGenerates an AngularJS service decorator.\r\n\r\nExample:\r\n```bash\r\nyo angular-fullstack:decorator serviceName\r\n[?] Where would you like to create this decorator? client/app/\r\n```\r\n\r\nProduces\r\n\r\n    client/app/serviceName/serviceName.decorator.js\r\n\r\n###Openshift\r\n\r\nDeploying to OpenShift can be done in just a few steps:\r\n\r\n    yo angular-fullstack:openshift\r\n\r\nA live application URL will be available in the output.\r\n\r\n> **oAuth**\r\n>\r\n> If you're using any oAuth strategies, you must set environment variables for your selected oAuth. For example, if we're using Facebook oAuth we would do this :\r\n>\r\n>     rhc set-env FACEBOOK_ID=id -a my-openshift-app\r\n>     rhc set-env FACEBOOK_SECRET=secret -a my-openshift-app\r\n>\r\n> You will also need to set `DOMAIN` environment variable:\r\n>\r\n>     rhc config:set DOMAIN=<your-openshift-app-name>.rhcloud.com\r\n>\r\n>     # or (if you're using it):\r\n>\r\n>     rhc config:set DOMAIN=<your-custom-domain>\r\n>\r\n> After you've set the required environment variables, restart the server:\r\n>\r\n>     rhc app-restart -a my-openshift-app\r\n\r\nTo make your deployment process easier consider using [grunt-build-control](https://github.com/robwierzbowski/grunt-build-control).\r\n\r\n**Pushing Updates**\r\n\r\n    grunt\r\n\r\nCommit and push the resulting build, located in your dist folder:\r\n\r\n    grunt buildcontrol:openshift\r\n\r\n### Heroku\r\n\r\nDeploying to heroku only takes a few steps.\r\n\r\n    yo angular-fullstack:heroku\r\n\r\nTo work with your new heroku app using the command line, you will need to run any `heroku` commands from the `dist` folder.\r\n\r\n\r\nIf you're using mongoDB you will need to add a database to your app:\r\n\r\n    heroku addons:add mongohq\r\n\r\nYour app should now be live. To view it run `heroku open`.\r\n\r\n>\r\n> If you're using any oAuth strategies, you must set environment variables for your selected oAuth. For example, if we're using **Facebook** oAuth we would do this :\r\n>\r\n>     heroku config:set FACEBOOK_ID=id\r\n>     heroku config:set FACEBOOK_SECRET=secret\r\n>\r\n> You will also need to set `DOMAIN` environment variable:\r\n>\r\n>     heroku config:set DOMAIN=<your-heroku-app-name>.herokuapp.com\r\n>\r\n>     # or (if you're using it):\r\n>\r\n>     heroku config:set DOMAIN=<your-custom-domain>\r\n>\r\n\r\nTo make your deployment process easier consider using [grunt-build-control](https://github.com/robwierzbowski/grunt-build-control).\r\n\r\n#### Pushing Updates\r\n\r\n    grunt\r\n\r\nCommit and push the resulting build, located in your dist folder:\r\n\r\n    grunt buildcontrol:heroku\r\n\r\n\r\n## Bower Components\r\n\r\nThe following packages are always installed by the [app](#app) generator:\r\n\r\n* angular\r\n* angular-cookies\r\n* angular-mocks\r\n* angular-resource\r\n* angular-sanitize\r\n* angular-scenario\r\n* es5-shim\r\n* font-awesome\r\n* json3\r\n* jquery\r\n* lodash\r\n\r\nThese packages are installed optionally depending on your configuration:\r\n\r\n* angular-route\r\n* angular-ui-router\r\n* angular-socket-io\r\n* angular-bootstrap\r\n* bootstrap\r\n\r\nAll of these can be updated with `bower update` as new versions are released.\r\n\r\n## Configuration\r\nYeoman generated projects can be further tweaked according to your needs by modifying project files appropriately.\r\n\r\nA `.yo-rc` file is generated for helping you copy configuration across projects, and to allow you to keep track of your settings. You can change this as you see fit.\r\n\r\n## Testing\r\n\r\nRunning `grunt test` will run the client and server unit tests with karma and mocha.\r\n\r\nUse `grunt test:server` to only run server tests.\r\n\r\nUse `grunt test:client` to only run client tests.\r\n\r\n**Protractor tests**\r\n\r\nTo setup protractor e2e tests, you must first run\r\n\r\n`npm run update-webdriver`\r\n\r\nUse `grunt test:e2e` to have protractor go through tests located in the `e2e` folder.\r\n\r\n## Environment Variables\r\n\r\nKeeping your app secrets and other sensitive information in source control isn't a good idea. To have grunt launch your app with specific environment variables, add them to the git ignored environment config file: `server/config/local.env.js`.\r\n\r\n## Project Structure\r\n\r\nOverview\r\n\r\n    ├── client\r\n    │   ├── app                 - All of our app specific components go in here\r\n    │   ├── assets              - Custom assets: fonts, images, etc…\r\n    │   ├── components          - Our reusable components, non-specific to to our app\r\n    │\r\n    ├── e2e                     - Our protractor end to end tests\r\n    │\r\n    └── server\r\n        ├── api                 - Our apps server api\r\n        ├── auth                - For handling authentication with different auth strategies\r\n        ├── components          - Our reusable or app-wide components\r\n        ├── config              - Where we do the bulk of our apps configuration\r\n        │   └── local.env.js    - Keep our environment variables out of source control\r\n        │   └── environment     - Configuration specific to the node environment\r\n        └── views               - Server rendered views\r\n\r\nAn example client component in `client/app`\r\n\r\n    main\r\n    ├── main.js                 - Routes\r\n    ├── main.controller.js      - Controller for our main route\r\n    ├── main.controller.spec.js - Test\r\n    ├── main.html               - View\r\n    └── main.less               - Styles\r\n\r\nAn example server component in `server/api`\r\n\r\n    thing\r\n    ├── index.js                - Routes\r\n    ├── thing.controller.js     - Controller for our `thing` endpoint\r\n    ├── thing.model.js          - Database model\r\n    ├── thing.socket.js         - Register socket events\r\n    └── thing.spec.js           - Test\r\n\r\n## Contribute\r\n\r\nSee the [contributing docs](https://github.com/DaftMonk/generator-angular-fullstack/blob/master/contributing.md)\r\n\r\nThis project has 2 main branches: `master` and `canary`. The `master` branch is where the current stable code lives and should be used for production setups. The `canary` branch is the main development branch, this is where PRs should be submitted to (backport fixes may be applied to `master`).\r\n\r\nBy seperating the current stable code from the cutting-edge development we hope to provide a stable and efficient workflow for users and developers alike.\r\n\r\nWhen submitting an issue, please follow the [guidelines](https://github.com/yeoman/yeoman/blob/master/contributing.md#issue-submission). Especially important is to make sure Yeoman is up-to-date, and providing the command or commands that cause the issue.\r\n\r\nWhen submitting a PR, make sure that the commit messages match the [AngularJS conventions](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/).\r\n\r\nWhen submitting a bugfix, try to write a test that exposes the bug and fails before applying your fix. Submit the test alongside the fix.\r\n\r\nWhen submitting a new feature, add tests that cover the feature.\r\n\r\nSee the `travis.yml` for configuration required to run tests.\r\n\r\n## License\r\n\r\n[BSD license](http://opensource.org/licenses/bsd-license.php)\r\n",
  "readmeFilename": "readme.md",
  "_id": "generator-angular-fullstack@2.0.13",
  "dist": {
    "shasum": "336d777317730d177d402afaf913c8314e888ad5"
  },
  "_resolved": "git://github.com/5Volt/generator-angular-fullstack#f232792ec1033acb8bbe8753e1b0295e6964c8ba",
  "_from": "git://github.com/5Volt/generator-angular-fullstack",
  "_fromGithub": true
}
